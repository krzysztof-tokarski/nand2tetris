/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Splits 512 registers into 8 sets of 64 registers.
    // 3 left-most bits form a key to the RAM64 that were interested in,
    // e.g. 000 gets us first RAM64, 001 gets the second set etc.
    DMux8Way(in=load, sel=address[6..8], a=set1, b=set2, c=set3, d=set4, e=set5, f=set6, g=set7, h=set8);

    // We pass address [0..5] as set of 64Registers is not only concerned with
    // the first 6 bits
    RAM64(in=in, load=set1, address=address[0..5], out=ram1);
    RAM64(in=in, load=set2, address=address[0..5], out=ram2);
    RAM64(in=in, load=set3, address=address[0..5], out=ram3);
    RAM64(in=in, load=set4, address=address[0..5], out=ram4);
    RAM64(in=in, load=set5, address=address[0..5], out=ram5);
    RAM64(in=in, load=set6, address=address[0..5], out=ram6);
    RAM64(in=in, load=set7, address=address[0..5], out=ram7);
    RAM64(in=in, load=set8, address=address[0..5], out=ram8);

    // Order matters as were using the same key as in DMux
    Mux8Way16(a=ram1, b=ram2, c=ram3, d=ram4, e=ram5, f=ram6, g=ram7, h=ram8, sel=address[6..8], out=out);
}
