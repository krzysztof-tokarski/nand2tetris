// /**
//  * The Hack Central Processing unit (CPU).
//  * Parses the binary code in the instruction input and executes it according to the
//  * Hack machine language specification.
//  * In the case of a C-instruction, computes the function specified by the instruction.
//  * If the instruction specifies to read a memory value, the inM input is expected to contain this value.
//  * If the instruction specifies to write a value to the memory, sets the outM output to this value, sets the addressM
//  * output to the target address, and asserts the writeM output (when writeM == 0, any value may appear in outM).
//  * If the reset input is 0, computes the address of the next instruction and sets the pc output to that value.
//  * If the reset input is 1, sets pc to 0.
//  * Note: The outM and writeM outputs are combinational: they are affected by the
//  * instruction's execution during the current cycle. The addressM and pc outputs are
//  * clocked: although they are affected by the instruction's execution, they commit to
//  * their new values only in the next cycle.
//  */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
                            //15 - opcode
                            //14-13 - n/a
                            //12 - alumux sel (compbits)
                            //11-6 - (compbits)
                            //5-3 - destination 
                            //2-0 - jump 
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // isAInstruction
    Not(
        in=instruction[15], 
        out=aInstruction
    );
    
    // choose instruction or ALU output for ARegister
    Mux16(
        a=aluOut, 
        b=instruction, 
        sel=aInstruction, 
        out=aRegisterIn
    );
    
    // we want to load ARegister if aInstruction or instruction requires ARegister load
    Or(
        a=aInstruction, 
        b=instruction[5], 
        out=loadARegister
    );
    
    ARegister(
        in=aRegisterIn, 
        load=loadARegister, 
        out=aRegisterOut, 
        out[0..14]=addressM
    );

    //# D
    And(
        a=instruction[15],  
        b=instruction[4],   
        out=loadDRegister
    );
    
    DRegister(
        in=aluOut, 
        load=loadDRegister, 
        out=aluIn1
    );
    //


    // selector between A or M that will go to ALU
    And(
        a=instruction[15],
        b=instruction[12],
        out=AorM
    );
	
    Mux16(
        a=aRegisterOut,
        b=inM,
        sel=AorM,
        out=aluIn2
    );

    ALU(
        x=aluIn1, 
        y=aluIn2, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut, 
        out=outM, 
        zr=aluOutEqualsZero, 
        ng=aluOutIsNegative
    );

	And(
        a=instruction[15],
        b=instruction[3],
        out=writeM
    );
	
    Not(
        in=aluOutEqualsZero,
        out=aluOutIsNotZero
    );
    Not(
        in=aluOutIsNegative,
        out=aluOutIsNotNegative
    );
    And(a=aluOutIsNotNegative, 
        b=aluOutIsNotZero, 
        out=aluOutIsPositive
    );

	And(
        a=instruction[15],
        b=instruction[0],
        out=isJGT
    );
    And(
        a=isJGT, 
        b=aluOutIsPositive, 
        out=performJGT
    );
    
    And(
        a=instruction[15], 
        b=instruction[1], 
        out=isJEQ
    );
    And(
        a=isJEQ, 
        b=aluOutEqualsZero, 
        out=performJEQ
    );

    And(
        a=instruction[15],
        b=instruction[2],
        out=isJLT
    );

    And(
        a=isJLT, 
        b=aluOutIsNegative, 
        out=performJLT
    );

    Or(
        a=performJGT,
        b=performJEQ, 
        out=JGTorJEQ
    );
    Or(
        a=JGTorJEQ, 
        b=performJLT, 
        out=pcLoad
    );

    PC(
        in=aRegisterOut, 
        load=pcLoad, 
        inc=true, 
        reset=reset, 
        out[0..14]=pc
    );
}

